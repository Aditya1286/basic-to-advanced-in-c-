Here are some practice questions to reinforce your understanding of the topics covered so far, up to Day 6:

### Object-Oriented Programming (OOP)

1. **Inheritance**
   - Create a base class `Shape` with derived classes `Circle` and `Rectangle`. Implement methods to calculate area and perimeter for each shape.

2. **Polymorphism**
   - Extend the previous question by implementing a function that takes a `Shape` pointer and prints the area and perimeter.

3. **Encapsulation**
   - Create a class `BankAccount` that encapsulates account details (account number, balance) and provides methods for depositing and withdrawing money.

4. **Abstraction**
   - Design an abstract class `Vehicle` with derived classes `Car` and `Bike`. Implement a method to display the type of vehicle.

---

### Templates

5. **Function Templates**
   - Write a function template that swaps two values of any type and demonstrate its usage with different data types.

6. **Class Templates**
   - Implement a simple stack class template that supports `push`, `pop`, and `top` operations.

---

### Smart Pointers

7. **Unique Pointer**
   - Write a program that uses `std::unique_ptr` to manage a dynamic array of integers and prints its elements.

8. **Shared Pointer**
   - Create two classes `Author` and `Book`, where `Book` holds a shared pointer to `Author`. Show how both classes can reference each other.

9. **Weak Pointer**
   - Implement a scenario where `weak_ptr` is used to avoid circular references between two classes.

---

### Exception Handling

10. **Basic Exception Handling**
    - Write a function that reads an integer from the user and throws an exception if the input is invalid. Handle the exception in the main function.

11. **Custom Exceptions**
    - Create a custom exception class for handling invalid operations in a calculator program. Implement basic operations (add, subtract, multiply, divide) and throw an exception for division by zero.

---

### File I/O Operations

12. **Reading from File**
    - Write a program that reads a list of names from a file and prints them to the console.

13. **Writing to File**
    - Create a program that writes a list of numbers (1 to 100) to a file, one number per line.

14. **File Stream Operations**
    - Implement a program that reads numbers from a file, calculates their average, and writes the average to another file.

---

### Advanced Topics

15. **STL Algorithms**
    - Use STL algorithms to find the maximum and minimum values in a vector of integers and print them.

16. **Vector Manipulation**
    - Write a program that populates a vector with random integers and then sorts the vector using STL.

---

### Additional Challenges

17. **Class Composition**
    - Create a `Library` class that contains a collection of `Book` objects. Implement methods to add a book, remove a book, and display all books.

18. **Complex Data Structures**
    - Design a simple phone book application using a map where the name is the key and the phone number is the value. Implement functions to add, search, and delete entries.

---

### Conclusion

Work on these questions to solidify your understanding of the C++ concepts learned so far. Each question encourages you to think critically and apply what youâ€™ve learned in practical scenarios. If you need help with any specific question, feel free to ask!
